using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProcessMultipleException
{
    //custom exception descibe thE details Of the car-is-dead condition
    //(remember, you can also simply extend exception.
    [Serializable]

    class CarIsDeadException :ApplicationException
    {
       // private string msgDetails = string.Empty;
        public DateTime ErrorTimeStamp { get; set; }
        public string CauseOfError { get; set; }

        //constuctor
       public CarIsDeadException(string message, string causeOfError, DateTime timeOfError)
            : base(message)
        {
            //msgDetails = message;
            CauseOfError = causeOfError;
            ErrorTimeStamp = timeOfError;
        
        }

        //override the system.message property
        // public override string Message => $"Car Error Message: {msgDetails}";

        //alternatively the above can be written as such
        //without a string variable to represent the message
        //and overriding the message property.

        //the above way of building custom Exception is commented
        //out. Below is the .Net best practice
        //the code snippet below was generated by visual studio
        //by typing Exception and pressing tab key twice
        public CarIsDeadException() { }
        public CarIsDeadException(string message) : base(message) { }
        public CarIsDeadException(string message, Exception inner) : base(message, inner) { }
        protected CarIsDeadException(
          System.Runtime.Serialization.SerializationInfo info,
          System.Runtime.Serialization.StreamingContext context) : base(info, context) { }


    }
}
